name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-cov pytest-xdist
        pip install -e .

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=cvannotate --cov-report=xml --cov-report=term-missing --tb=short

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 cvannotate tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 cvannotate tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff cvannotate tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff cvannotate tests

    - name: Type checking with mypy
      run: |
        mypy cvannotate --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        bandit -r cvannotate -f json -o bandit-report.json || true
        bandit -r cvannotate

  package-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        cvannotate --help

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: [test, lint, security, package-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    environment: test-pypi
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_API_KEY }}
        skip-existing: true

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [test, lint, security, package-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_KEY }}

  build-conda:
    runs-on: ${{ matrix.os }}
    needs: [test, lint, security, package-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'
        channels: conda-forge,defaults
        channel-priority: true

    - name: Install conda-build
      shell: bash -l {0}
      run: |
        conda install conda-build anaconda-client
        conda info
        conda list

    - name: Update conda recipe version
      shell: bash -l {0}
      run: |
        # Extract version from pyproject.toml or tag
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "//' | sed 's/"//')
        fi
        
        echo "Building conda package for version: $VERSION"
        
        # Update meta.yaml with current version
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Windows PowerShell command
          powershell -Command "(Get-Content conda-recipe/meta.yaml) -replace '{% set version = .* %}', '{% set version = \"$VERSION\" %}' | Set-Content conda-recipe/meta.yaml"
        else
          # Unix sed command
          sed -i.bak "s/{% set version = .* %}/{% set version = \"$VERSION\" %}/" conda-recipe/meta.yaml
        fi

    - name: Build conda package
      shell: bash -l {0}
      timeout-minutes: 30
      run: |
        # Use the cross-platform build script that handles path detection
        ./scripts/build-conda-ci-simple.sh

    - name: Upload conda package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: conda-packages-${{ matrix.os }}
        path: dist-conda/

  publish-conda-test:
    runs-on: ubuntu-latest
    needs: [build-conda]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: conda-test
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'

    - name: Download conda packages
      uses: actions/download-artifact@v4
      with:
        pattern: conda-packages-*
        path: dist-conda/
        merge-multiple: true

    - name: Install anaconda-client
      shell: bash -l {0}
      run: |
        conda install anaconda-client -c conda-forge
        anaconda --version

    - name: Upload to anaconda.org test channel
      shell: bash -l {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
      run: |
        echo "Uploading packages to test channel..."
        
        # Set the token for anaconda client
        export ANACONDA_API_TOKEN="${{ secrets.ANACONDA_API_TOKEN }}"
        
        # List packages to upload
        echo "Found packages:"
        find dist-conda/ -name "*.tar.bz2" -o -name "*.conda"
        
        # Upload each package individually with better error handling
        for package in $(find dist-conda/ -name "*.tar.bz2" -o -name "*.conda"); do
          if [[ -f "$package" ]]; then
            echo "Uploading: $package"
            echo "File size: $(ls -lh "$package" | awk '{print $5}')"
            anaconda upload "$package" --label test --force --no-progress || {
              echo "Failed to upload $package"
              exit 1
            }
          else
            echo "Warning: Package file not found: $package"
          fi
        done

  publish-conda-production:
    runs-on: ubuntu-latest
    needs: [build-conda, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: conda-production
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'

    - name: Download conda packages
      uses: actions/download-artifact@v4
      with:
        pattern: conda-packages-*
        path: dist-conda/
        merge-multiple: true

    - name: Install anaconda-client
      shell: bash -l {0}
      run: |
        conda install anaconda-client -c conda-forge
        anaconda --version

    - name: Upload to anaconda.org main channel
      shell: bash -l {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
      run: |
        echo "Uploading packages to main channel..."
        
        # Set the token for anaconda client
        export ANACONDA_API_TOKEN="${{ secrets.ANACONDA_API_TOKEN }}"
        
        # List packages to upload
        echo "Found packages:"
        find dist-conda/ -name "*.tar.bz2" -o -name "*.conda"
        
        # Upload each package individually with better error handling
        for package in $(find dist-conda/ -name "*.tar.bz2" -o -name "*.conda"); do
          if [[ -f "$package" ]]; then
            echo "Uploading: $package"
            echo "File size: $(ls -lh "$package" | awk '{print $5}')"
            anaconda upload "$package" --force --no-progress || {
              echo "Failed to upload $package"
              exit 1
            }
          else
            echo "Warning: Package file not found: $package"
          fi
        done

  create-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-conda-production]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this Release
          - Released version ${{ github.ref_name }} to PyPI
          - Released version ${{ github.ref_name }} to Anaconda.org (conda-forge)
          - See commits for detailed changes
          
          ## Installation
          
          ### Via PyPI
          ```bash
          pip install cvannotate
          ```
          
          ### Via Conda
          ```bash
          conda install -c ${{ secrets.ANACONDA_USERNAME }} cvannotate
          # or with mamba
          mamba install -c ${{ secrets.ANACONDA_USERNAME }} cvannotate
          ```
